
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDnonassocINFINFEGEGALEGALSUPleftPLUSMINUSleftTIMESDIVIDEAND DIVIDE EGAL EGALEGAL ELSE FOR IF INF INFEG LBRACE LPAREN MINUS NAME NUMBER OR PLUS PRINT RBRACE RPAREN SEMI SUP TIMES WHILEstart : blocbloc : bloc statement SEMI\n| statement SEMIstatement : PRINT LPAREN expression RPARENstatement : NAME EGAL expressionstatement : IF LPAREN expression RPAREN LBRACE bloc RBRACE\n| IF LPAREN expression RPAREN LBRACE bloc RBRACE ELSE LBRACE bloc RBRACEstatement : WHILE LPAREN expression RPAREN LBRACE bloc RBRACEstatement : FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE bloc RBRACEexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression INF expression\n| expression INFEG expression\n| expression EGALEGAL expression\n| expression SUP expression\n| expression AND expression\n| expression OR expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'PRINT':([0,2,10,15,16,51,52,54,55,56,62,63,64,65,],[4,4,-3,4,-2,4,4,4,4,4,4,4,4,4,]),'NAME':([0,2,10,11,12,13,14,15,16,17,27,28,29,30,31,32,33,34,35,36,39,51,52,54,55,56,62,63,64,65,],[5,5,-3,20,20,20,20,5,-2,20,20,20,20,20,20,20,20,20,20,20,20,5,5,5,5,5,5,5,5,5,]),'IF':([0,2,10,15,16,51,52,54,55,56,62,63,64,65,],[6,6,-3,6,-2,6,6,6,6,6,6,6,6,6,]),'WHILE':([0,2,10,15,16,51,52,54,55,56,62,63,64,65,],[7,7,-3,7,-2,7,7,7,7,7,7,7,7,7,]),'FOR':([0,2,10,15,16,51,52,54,55,56,62,63,64,65,],[8,8,-3,8,-2,8,8,8,8,8,8,8,8,8,]),'$end':([1,2,10,16,],[0,-1,-3,-2,]),'SEMI':([3,9,19,20,21,24,26,40,41,42,43,44,45,46,47,48,49,50,53,57,58,66,67,],[10,16,-21,-22,-5,39,-4,-20,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,56,-6,-8,-7,-9,]),'LPAREN':([4,6,7,8,11,12,13,14,17,27,28,29,30,31,32,33,34,35,36,39,],[11,13,14,15,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'EGAL':([5,],[12,]),'RBRACE':([10,16,54,55,64,65,],[-3,-2,57,58,66,67,]),'NUMBER':([11,12,13,14,17,27,28,29,30,31,32,33,34,35,36,39,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'RPAREN':([18,19,20,21,22,23,25,26,40,41,42,43,44,45,46,47,48,49,50,57,58,59,66,67,],[26,-21,-22,-5,37,38,40,-4,-20,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-6,-8,61,-7,-9,]),'PLUS':([18,19,20,21,22,23,25,40,41,42,43,44,45,46,47,48,49,50,53,],[27,-21,-22,27,27,27,27,-20,-10,-11,-12,-13,27,27,27,27,27,27,27,]),'MINUS':([18,19,20,21,22,23,25,40,41,42,43,44,45,46,47,48,49,50,53,],[28,-21,-22,28,28,28,28,-20,-10,-11,-12,-13,28,28,28,28,28,28,28,]),'TIMES':([18,19,20,21,22,23,25,40,41,42,43,44,45,46,47,48,49,50,53,],[29,-21,-22,29,29,29,29,-20,29,29,-12,-13,29,29,29,29,29,29,29,]),'DIVIDE':([18,19,20,21,22,23,25,40,41,42,43,44,45,46,47,48,49,50,53,],[30,-21,-22,30,30,30,30,-20,30,30,-12,-13,30,30,30,30,30,30,30,]),'INF':([18,19,20,21,22,23,25,40,41,42,43,44,45,46,47,48,49,50,53,],[31,-21,-22,31,31,31,31,-20,-10,-11,-12,-13,None,None,None,None,31,31,31,]),'INFEG':([18,19,20,21,22,23,25,40,41,42,43,44,45,46,47,48,49,50,53,],[32,-21,-22,32,32,32,32,-20,-10,-11,-12,-13,None,None,None,None,32,32,32,]),'EGALEGAL':([18,19,20,21,22,23,25,40,41,42,43,44,45,46,47,48,49,50,53,],[33,-21,-22,33,33,33,33,-20,-10,-11,-12,-13,None,None,None,None,33,33,33,]),'SUP':([18,19,20,21,22,23,25,40,41,42,43,44,45,46,47,48,49,50,53,],[34,-21,-22,34,34,34,34,-20,-10,-11,-12,-13,None,None,None,None,34,34,34,]),'AND':([18,19,20,21,22,23,25,40,41,42,43,44,45,46,47,48,49,50,53,],[35,-21,-22,35,35,35,35,-20,-10,-11,-12,-13,-14,-15,-16,-17,-18,35,35,]),'OR':([18,19,20,21,22,23,25,40,41,42,43,44,45,46,47,48,49,50,53,],[36,-21,-22,36,36,36,36,-20,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,36,]),'LBRACE':([37,38,60,61,],[51,52,62,63,]),'ELSE':([57,],[60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'bloc':([0,51,52,62,63,],[2,54,55,64,65,]),'statement':([0,2,15,51,52,54,55,56,62,63,64,65,],[3,9,24,3,3,9,9,59,3,3,9,9,]),'expression':([11,12,13,14,17,27,28,29,30,31,32,33,34,35,36,39,],[18,21,22,23,25,41,42,43,44,45,46,47,48,49,50,53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> bloc','start',1,'p_start','Interpreteur.py',67),
  ('bloc -> bloc statement SEMI','bloc',3,'p_bloc','Interpreteur.py',73),
  ('bloc -> statement SEMI','bloc',2,'p_bloc','Interpreteur.py',74),
  ('statement -> PRINT LPAREN expression RPAREN','statement',4,'p_statement_print','Interpreteur.py',84),
  ('statement -> NAME EGAL expression','statement',3,'p_statement_assign','Interpreteur.py',88),
  ('statement -> IF LPAREN expression RPAREN LBRACE bloc RBRACE','statement',7,'p_statement_if','Interpreteur.py',92),
  ('statement -> IF LPAREN expression RPAREN LBRACE bloc RBRACE ELSE LBRACE bloc RBRACE','statement',11,'p_statement_if','Interpreteur.py',93),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE bloc RBRACE','statement',7,'p_statement_while','Interpreteur.py',100),
  ('statement -> FOR LPAREN statement SEMI expression SEMI statement RPAREN LBRACE bloc RBRACE','statement',11,'p_statement_for','Interpreteur.py',104),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Interpreteur.py',108),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Interpreteur.py',109),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Interpreteur.py',110),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Interpreteur.py',111),
  ('expression -> expression INF expression','expression',3,'p_expression_binop','Interpreteur.py',112),
  ('expression -> expression INFEG expression','expression',3,'p_expression_binop','Interpreteur.py',113),
  ('expression -> expression EGALEGAL expression','expression',3,'p_expression_binop','Interpreteur.py',114),
  ('expression -> expression SUP expression','expression',3,'p_expression_binop','Interpreteur.py',115),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','Interpreteur.py',116),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','Interpreteur.py',117),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','Interpreteur.py',121),
  ('expression -> NUMBER','expression',1,'p_expression_number','Interpreteur.py',125),
  ('expression -> NAME','expression',1,'p_expression_name','Interpreteur.py',129),
]
